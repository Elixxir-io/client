import sys
import argparse
import logging as log

"""
This script checks a Bindings.objc.h file generated by a go mobile bindings
generation for skipped objects that are not in the below whitelist and errors
when they are found.
"""

# A whitelist of objects for the script to ignore having been skipped by go
# mobile bindings generation
whitelist = {
    "field": ["AdminKeysUpdateJSON.ChannelId", 
              "AuthenticatedConnection.Connection", 
              "BackupReport.RestoredContacts", "ChannelSendReport.RoundsList",
              "ChannelUpdateJSON.ChannelID", "DmBlockedUserJSON.User",
              "DmMessageDeletedJSON.MessageID", "DmMessageReceivedJSON.UUID",
              "DmMessageReceivedJSON.PubKey",
              "DmNotificationUpdateJSON.Changed",
              "DmNotificationUpdateJSON.Deleted",
              "DmNotificationUpdateJSON.NotificationFilter",
              "DmTokenUpdateJSON.ChannelId",
              "NotificationUpdateJSON.ChangedNotificationStates",
              "NotificationUpdateJSON.DeletedNotificationStates",
              "NotificationUpdateJSON.NotificationFilters",
              "NotificationUpdateJSON.MaxState", "Progress.TransferID",
              "ReceivedChannelMessageReport.RoundsList", 
              "ReceivedFile.TransferID", "ReceivedFile.SenderID",
              "RestlikeMessage.Version", "RoundsList.Rounds",
              "SingleUseCallbackReport.RoundsList",
              "SingleUseCallbackReport.Partner",
              "SingleUseCallbackReport.ReceptionID",
              "SingleUseResponseReport.RoundsList",
              "SingleUseResponseReport.ReceptionID",
              "SingleUseSendReport.RoundsList", 
              "SingleUseSendReport.ReceptionID",
              "UserMutedJSON.ChannelID", "UserMutedJSON.PubKey",
              "E2ESendReport.RoundsList", "FtReceivedProgress.ID",
              "GroupReport.RoundsList", "GroupSendReport.RoundsList",
              "FtSentProgress.ID", "MessageDeletedJSON.MessageID",
              "MessageReceivedJSON.ChannelID", "NickNameUpdateJSON.ChannelId"],
    "constructor": ["ChannelsManager.NewChannelsManagerGoEventModel",
                    "DMClient.NewDMClientWithGoEventModel"],
    "method": [],
    "function": ["GetCMixInstance", "LoadChannelsManagerGoEventModel",
                 "NewChannelsManagerGoEventModel", 
                 "NewDMClientWithGoEventModel"]
}


def main():
    log.basicConfig(format='[%(levelname)s] %(asctime)s: %(message)s',
                    level=log.INFO, datefmt='%d-%b-%y %H:%M:%S')
    args = get_args()
    log.info("Running with configuration: {}".format(args))

    # Variable to store if we've detected a skipped object not in the whitelist.
    # We use a variable instead of exiting at the skipped object detection so we
    # print every skipped object in one script execution.
    failure = False

    # Read every line in the header file and check if its in the whitelist
    for line in args["path"].readlines():
        # An example line is "// skipped field AdminKeysUpdateJSON.ChannelId with unsupported type: *gitlab.com/xx_network/primitives/id.ID"
        if line.startswith("// skipped "):
            parts = line.split(" ", 4)
            
            type = parts[2]
            object = parts[3]
            reason = parts[4]

            if object not in whitelist[type]:
                print(line.strip())
                failure = True

    # If we found an object not in the whitelist, we exit with an error code
    if failure:
        sys.exit(-1)


def get_args():
    """
    get_args controls the argparse usage for the script. It sets up and parses
    arguments and returns them in dict format
    """
    parser = argparse.ArgumentParser(description="")
    parser.add_argument("path", metavar="filePath", type=argparse.FileType('r', encoding="UTF-8"),
                        help="")

    args = vars(parser.parse_args())
    return args


if __name__ == "__main__":
    main()