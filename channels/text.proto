////////////////////////////////////////////////////////////////////////////////
// Copyright Â© 2022 xx foundation                                             //
//                                                                            //
// Use of this source code is governed by a license that can be found in the  //
// LICENSE file                                                               //
////////////////////////////////////////////////////////////////////////////////

syntax = "proto3";

option go_package = "gitlab.com/elixxir/client/channels";

package channels;

// CMIXChannelText is the payload for sending normal text messages to channels
// the replyMessageID is nil when it is not a reply.
message CMIXChannelText {
    uint32 version = 1;
    string text = 2;
    bytes  replyMessageID = 3;
}

// CMIXChannelReaction is the payload for reactions. The reaction must be a
// single emoji and the reactionMessageID must be non nil and a real message
// in the channel.
message CMIXChannelReaction {
    uint32 version = 1;
    string reaction = 2;
    bytes  reactionMessageID = 3;
}

// CMIXChannelDelete is the payload for a Delete MessageType. It hides a
// specific message from the user's view.
message CMIXChannelDelete {
    uint32 version = 1;
    bytes  messageID = 2;  // The [channel.MessageID] of the message to delete
    bool   undoAction = 4; // If true, the message is unhidden
}

// CMIXChannelPinned is the payload for a Pinned MessageType. It pins a specific
// message to a channel.
message CMIXChannelPinned {
    uint32 version = 1;
    bytes  messageID = 2;  // The [channel.MessageID] of the message to pin
    bool   undoAction = 4; // If true, the message is unpinned
}

// CMIXChannelMute is the payload for a Mute MessageType. It mutes a specific
// user so all current and future messages will be hidden from the user's view.
// It also prevents the user from sending messages.
message CMIXChannelMute {
    uint32 version = 1;
    bytes  pubKey = 2;     // The [ed25519.PublicKey] of the user to mute
    bool   undoAction = 4; // If true, the user is un-muted
}