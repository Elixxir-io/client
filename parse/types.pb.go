// Code generated by protoc-gen-go. DO NOT EDIT.
// source: types.proto

/*
Package parse is a generated protocol buffer package.

It is generated from these files:
	types.proto

It has these top-level messages:
	TextMessage
	ChannelMessage
*/
package parse

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Type int32

const (
	Type_NO_TYPE         Type = 0
	Type_TEXT_MESSAGE    Type = 1
	Type_CHANNEL_MESSAGE Type = 2
	// We currently parse these types without using proto buffers
	// We use the types, but don't look for proto buffer definitions
	Type_UDB_PUSH_KEY          Type = 10
	Type_UDB_PUSH_KEY_RESPONSE Type = 11
	Type_UDB_GET_KEY           Type = 12
	Type_UDB_GET_KEY_RESPONSE  Type = 13
	Type_UDB_REGISTER          Type = 14
	Type_UDB_REGISTER_RESPONSE Type = 15
	Type_UDB_SEARCH            Type = 16
	Type_UDB_SEARCH_RESPONSE   Type = 17
)

var Type_name = map[int32]string{
	0:  "NO_TYPE",
	1:  "TEXT_MESSAGE",
	2:  "CHANNEL_MESSAGE",
	10: "UDB_PUSH_KEY",
	11: "UDB_PUSH_KEY_RESPONSE",
	12: "UDB_GET_KEY",
	13: "UDB_GET_KEY_RESPONSE",
	14: "UDB_REGISTER",
	15: "UDB_REGISTER_RESPONSE",
	16: "UDB_SEARCH",
	17: "UDB_SEARCH_RESPONSE",
}
var Type_value = map[string]int32{
	"NO_TYPE":               0,
	"TEXT_MESSAGE":          1,
	"CHANNEL_MESSAGE":       2,
	"UDB_PUSH_KEY":          10,
	"UDB_PUSH_KEY_RESPONSE": 11,
	"UDB_GET_KEY":           12,
	"UDB_GET_KEY_RESPONSE":  13,
	"UDB_REGISTER":          14,
	"UDB_REGISTER_RESPONSE": 15,
	"UDB_SEARCH":            16,
	"UDB_SEARCH_RESPONSE":   17,
}

func (x Type) String() string {
	return proto.EnumName(Type_name, int32(x))
}
func (Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// Type 1
type TextMessage struct {
	Color   int32  `protobuf:"zigzag32,2,opt,name=color" json:"color,omitempty"`
	Message string `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	Time    int64  `protobuf:"varint,4,opt,name=time" json:"time,omitempty"`
}

func (m *TextMessage) Reset()                    { *m = TextMessage{} }
func (m *TextMessage) String() string            { return proto.CompactTextString(m) }
func (*TextMessage) ProtoMessage()               {}
func (*TextMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *TextMessage) GetColor() int32 {
	if m != nil {
		return m.Color
	}
	return 0
}

func (m *TextMessage) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *TextMessage) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

// Type 2
type ChannelMessage struct {
	SpeakerID []byte `protobuf:"bytes,3,opt,name=speakerID,proto3" json:"speakerID,omitempty"`
	Message   []byte `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
}

func (m *ChannelMessage) Reset()                    { *m = ChannelMessage{} }
func (m *ChannelMessage) String() string            { return proto.CompactTextString(m) }
func (*ChannelMessage) ProtoMessage()               {}
func (*ChannelMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ChannelMessage) GetSpeakerID() []byte {
	if m != nil {
		return m.SpeakerID
	}
	return nil
}

func (m *ChannelMessage) GetMessage() []byte {
	if m != nil {
		return m.Message
	}
	return nil
}

func init() {
	proto.RegisterType((*TextMessage)(nil), "parse.TextMessage")
	proto.RegisterType((*ChannelMessage)(nil), "parse.ChannelMessage")
	proto.RegisterEnum("parse.Type", Type_name, Type_value)
}

func init() { proto.RegisterFile("types.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 293 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x91, 0xc1, 0x4e, 0xf2, 0x40,
	0x14, 0x85, 0xff, 0x42, 0xf9, 0x09, 0xb7, 0x08, 0xc3, 0x05, 0x63, 0x4d, 0x5c, 0x10, 0x56, 0xc4,
	0x85, 0x1b, 0x9f, 0x00, 0xca, 0x4d, 0x4b, 0x94, 0x52, 0x67, 0x86, 0x44, 0xdc, 0x34, 0xd5, 0x4c,
	0xd4, 0x08, 0xb4, 0x69, 0xbb, 0x90, 0x37, 0xf6, 0x31, 0x4c, 0xdb, 0x8c, 0xed, 0xee, 0x9e, 0x73,
	0xbe, 0x7c, 0x9b, 0x0b, 0x56, 0x7e, 0x4e, 0x54, 0x76, 0x97, 0xa4, 0x71, 0x1e, 0x63, 0x27, 0x89,
	0xd2, 0x4c, 0xcd, 0x9e, 0xc0, 0x92, 0xea, 0x3b, 0xdf, 0xa8, 0x2c, 0x8b, 0xde, 0x15, 0x4e, 0xa0,
	0xf3, 0x16, 0x1f, 0xe2, 0xd4, 0x6e, 0x4d, 0x8d, 0xf9, 0x88, 0x57, 0x01, 0x6d, 0xe8, 0x1e, 0x2b,
	0xc0, 0x6e, 0x4f, 0x8d, 0x79, 0x8f, 0xeb, 0x88, 0x08, 0x66, 0xfe, 0x79, 0x54, 0xb6, 0x39, 0x35,
	0xe6, 0x6d, 0x5e, 0xde, 0x33, 0x0f, 0x06, 0xce, 0x47, 0x74, 0x3a, 0xa9, 0x83, 0xb6, 0xde, 0x40,
	0x2f, 0x4b, 0x54, 0xf4, 0xa5, 0xd2, 0xf5, 0xaa, 0x34, 0xf4, 0x79, 0x5d, 0x34, 0xed, 0x66, 0xb9,
	0xe9, 0x78, 0xfb, 0x63, 0x80, 0x29, 0xcf, 0x89, 0x42, 0x0b, 0xba, 0xfe, 0x36, 0x94, 0xfb, 0x80,
	0xd8, 0x3f, 0x64, 0xd0, 0x97, 0xf4, 0x2c, 0xc3, 0x0d, 0x09, 0xb1, 0x70, 0x89, 0x19, 0x38, 0x86,
	0xa1, 0xe3, 0x2d, 0x7c, 0x9f, 0x1e, 0xff, 0xca, 0x56, 0x81, 0xed, 0x56, 0xcb, 0x30, 0xd8, 0x09,
	0x2f, 0x7c, 0xa0, 0x3d, 0x03, 0xbc, 0x86, 0xcb, 0x66, 0x13, 0x72, 0x12, 0xc1, 0xd6, 0x17, 0xc4,
	0x2c, 0x1c, 0x82, 0x55, 0x4c, 0x2e, 0xc9, 0x92, 0xed, 0xa3, 0x0d, 0x93, 0x46, 0x51, 0xa3, 0x17,
	0xda, 0xcb, 0xc9, 0x5d, 0x0b, 0x49, 0x9c, 0x0d, 0xb4, 0x57, 0x37, 0x35, 0x3c, 0xc4, 0x01, 0x40,
	0x31, 0x09, 0x5a, 0x70, 0xc7, 0x63, 0x0c, 0xaf, 0x60, 0x5c, 0xe7, 0x1a, 0x1c, 0x2d, 0xbb, 0x2f,
	0xd5, 0x43, 0x5e, 0xff, 0x97, 0xef, 0xb9, 0xff, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x1c, 0xee, 0x8d,
	0x0e, 0xad, 0x01, 0x00, 0x00,
}
