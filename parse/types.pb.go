// Code generated by protoc-gen-go. DO NOT EDIT.
// source: types.proto

/*
Package parse is a generated protocol buffer package.

It is generated from these files:
	types.proto

It has these top-level messages:
	TextMessage
	ChannelMessage
	PaymentResponse
	PaymentInvoice
*/
package parse

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Type int32

const (
	// Used as a wildcard for listeners to listen to all existing types.
	// Think of it as "No type in particular"
	Type_NO_TYPE Type = 0
	// See proto buf documentation below
	Type_TEXT_MESSAGE Type = 1
	// See proto buf
	Type_CHANNEL_MESSAGE Type = 2
	// Second field is the key data itself. This should be 2048 bits long
	// (according to the message length that our prime allows) and is
	// base64-encoded.
	Type_UDB_PUSH_KEY Type = 10
	// The push key response message is a string. If the key push was a
	// success, the UDB should respond with a message that starts with "PUSHKEY
	// COMPLETE", followed by the fingerprint of the key that was pushed.
	// If the response doesn't begin with "PUSHKEY COMPLETE", the message is
	// an error message and should be shown to the user.
	Type_UDB_PUSH_KEY_RESPONSE Type = 11
	// The get key message includes a single string field with the key
	// fingerprint of the key that needs gettin'. This is the same fingerprint
	// you would have pushed.
	Type_UDB_GET_KEY Type = 12
	// The get key response message is a string. The first space-separated
	// field should always be "GETKEY". The second field is the fingerprint of
	// the key. The third field is "NOTFOUND" if the UDB didn't find the key,
	// or the key itself, encoded in base64, otherwise.
	Type_UDB_GET_KEY_RESPONSE Type = 13
	// To wit: The first argument in the list of space-separated fields is
	// the type of the registration. Currently the only allowed type is
	// "EMAIL". The second argument is the value of the type you're registering
	// with. In all currently acceptable registration types, this would be an
	// email address. If you could register with your phone, it would be your
	// phone number, and so on. Then, the key fingerprint of the user's key is
	// the third argument. To register successfully, you must have already
	// pushed the key with that fingerprint.
	Type_UDB_REGISTER Type = 14
	// The registration response is just a string. It will be either an error
	// message to show to the user, or the message "REGISTRATION COMPLETE" if
	// registration was successful.
	Type_UDB_REGISTER_RESPONSE Type = 15
	// The search message is just another space separated list. The first field
	// will contain the type of registered user you're searching for, namely
	// "EMAIL". The second field with contain the value of that type that
	// you're searching for.
	Type_UDB_SEARCH Type = 16
	// The search response is a list of fields. The first is always "SEARCH".
	// The second is always the value that the user searched for. The third is
	// "FOUND" or "NOTFOUND" depending on whether the UDB found the user. If
	// the user was FOUND, the last field will contain their key fingerprint,
	// which you can use with GET_KEY to get the keys you need to talk with
	// that user. Otherwise, this fourth field won't exist.
	Type_UDB_SEARCH_RESPONSE Type = 17
	// To get a message of this type, call the methods in the wallet.
	// TODO expose these methods over the API
	Type_PAYMENT_TRANSACTION Type = 20
	// See proto buf
	Type_PAYMENT_RESPONSE Type = 21
	// See proto buf
	Type_PAYMENT_INVOICE Type = 22
	// This message type is a list of fixed-length hashes, currently 256 bits
	// each, that are used as indexes into the inbound requests transaction list
	Type_PAYMENT_INVOICE_UI Type = 9000
)

var Type_name = map[int32]string{
	0:    "NO_TYPE",
	1:    "TEXT_MESSAGE",
	2:    "CHANNEL_MESSAGE",
	10:   "UDB_PUSH_KEY",
	11:   "UDB_PUSH_KEY_RESPONSE",
	12:   "UDB_GET_KEY",
	13:   "UDB_GET_KEY_RESPONSE",
	14:   "UDB_REGISTER",
	15:   "UDB_REGISTER_RESPONSE",
	16:   "UDB_SEARCH",
	17:   "UDB_SEARCH_RESPONSE",
	20:   "PAYMENT_TRANSACTION",
	21:   "PAYMENT_RESPONSE",
	22:   "PAYMENT_INVOICE",
	9000: "PAYMENT_INVOICE_UI",
}
var Type_value = map[string]int32{
	"NO_TYPE":               0,
	"TEXT_MESSAGE":          1,
	"CHANNEL_MESSAGE":       2,
	"UDB_PUSH_KEY":          10,
	"UDB_PUSH_KEY_RESPONSE": 11,
	"UDB_GET_KEY":           12,
	"UDB_GET_KEY_RESPONSE":  13,
	"UDB_REGISTER":          14,
	"UDB_REGISTER_RESPONSE": 15,
	"UDB_SEARCH":            16,
	"UDB_SEARCH_RESPONSE":   17,
	"PAYMENT_TRANSACTION":   20,
	"PAYMENT_RESPONSE":      21,
	"PAYMENT_INVOICE":       22,
	"PAYMENT_INVOICE_UI":    9000,
}

func (x Type) String() string {
	return proto.EnumName(Type_name, int32(x))
}
func (Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// Is Type.TEXT_MESSAGE
// Used for conveying simple text messages between users
type TextMessage struct {
	// Terminal text foreground color. Used by the console UI
	Color int32 `protobuf:"zigzag32,2,opt,name=color" json:"color,omitempty"`
	// The message text itself. Varies in length
	Message string `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	// Timestamp (Unix time in seconds)
	// You can use this to display the time when the other user sent the message
	// TODO Remove this when all messages have timestamps
	Time int64 `protobuf:"varint,4,opt,name=time" json:"time,omitempty"`
}

func (m *TextMessage) Reset()                    { *m = TextMessage{} }
func (m *TextMessage) String() string            { return proto.CompactTextString(m) }
func (*TextMessage) ProtoMessage()               {}
func (*TextMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *TextMessage) GetColor() int32 {
	if m != nil {
		return m.Color
	}
	return 0
}

func (m *TextMessage) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *TextMessage) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

// Is Type.CHANNEL_MESSAGE
// This is the type of all messages that come from the channelbot.
type ChannelMessage struct {
	// This is the original speaker of the channel message, who sent the
	// message to the channel bot.
	SpeakerID []byte `protobuf:"bytes,3,opt,name=speakerID,proto3" json:"speakerID,omitempty"`
	// This is a serialized parse message under the hood. When writing a
	// listener for a channel message on a client, you need to unpack the
	// serialized parse message and rebroadcast it through the listeners.
	Message []byte `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
}

func (m *ChannelMessage) Reset()                    { *m = ChannelMessage{} }
func (m *ChannelMessage) String() string            { return proto.CompactTextString(m) }
func (*ChannelMessage) ProtoMessage()               {}
func (*ChannelMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ChannelMessage) GetSpeakerID() []byte {
	if m != nil {
		return m.SpeakerID
	}
	return nil
}

func (m *ChannelMessage) GetMessage() []byte {
	if m != nil {
		return m.Message
	}
	return nil
}

// Is Type.PAYMENT_RESPONSE
type PaymentResponse struct {
	// Indicates whether the payment succeeded or failed
	Success bool `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	// Response message from the payment bot. You should display this to the
	// user.
	Response string `protobuf:"bytes,2,opt,name=response" json:"response,omitempty"`
	// TODO Is it correct to use the whole hash?
	// This is the hash of the payment message that the payment bot received.
	// The client uses it to remove the correct pending transaction from the
	// list of pending transactions.
	ID string `protobuf:"bytes,3,opt,name=ID" json:"ID,omitempty"`
}

func (m *PaymentResponse) Reset()                    { *m = PaymentResponse{} }
func (m *PaymentResponse) String() string            { return proto.CompactTextString(m) }
func (*PaymentResponse) ProtoMessage()               {}
func (*PaymentResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *PaymentResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *PaymentResponse) GetResponse() string {
	if m != nil {
		return m.Response
	}
	return ""
}

func (m *PaymentResponse) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

// Is Type.PAYMENT_INVOICE
type PaymentInvoice struct {
	// Timestamp (Unix time in seconds)
	// Not currently used but could be useful for the user to verify the
	// correctness of an invoice.
	Time int64 `protobuf:"varint,1,opt,name=time" json:"time,omitempty"`
	// This is a single compound coin that the invoicer wants to be funded. The
	// payer should send a message to the payment bot to fund this compound, if
	// they wish to pay the payee.
	CreatedCoin []byte `protobuf:"bytes,2,opt,name=createdCoin,proto3" json:"createdCoin,omitempty"`
	// The payee should fill this out to describe what the payment is for or
	// about.
	Memo string `protobuf:"bytes,3,opt,name=memo" json:"memo,omitempty"`
}

func (m *PaymentInvoice) Reset()                    { *m = PaymentInvoice{} }
func (m *PaymentInvoice) String() string            { return proto.CompactTextString(m) }
func (*PaymentInvoice) ProtoMessage()               {}
func (*PaymentInvoice) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *PaymentInvoice) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *PaymentInvoice) GetCreatedCoin() []byte {
	if m != nil {
		return m.CreatedCoin
	}
	return nil
}

func (m *PaymentInvoice) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

func init() {
	proto.RegisterType((*TextMessage)(nil), "parse.TextMessage")
	proto.RegisterType((*ChannelMessage)(nil), "parse.ChannelMessage")
	proto.RegisterType((*PaymentResponse)(nil), "parse.PaymentResponse")
	proto.RegisterType((*PaymentInvoice)(nil), "parse.PaymentInvoice")
	proto.RegisterEnum("parse.Type", Type_name, Type_value)
}

func init() { proto.RegisterFile("types.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 433 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x92, 0xcf, 0x8e, 0x93, 0x50,
	0x14, 0xc6, 0x85, 0xe9, 0xd8, 0xe9, 0xa1, 0xd2, 0x3b, 0x67, 0x3a, 0x0e, 0x1a, 0x17, 0xa4, 0xab,
	0xc6, 0x85, 0x1b, 0x9f, 0x80, 0xa1, 0xd7, 0x96, 0x68, 0x29, 0x5e, 0x6e, 0xd5, 0xce, 0x86, 0x20,
	0x9e, 0x68, 0x63, 0xf9, 0x13, 0x2e, 0x1a, 0xfb, 0x46, 0xbe, 0x88, 0xef, 0x65, 0xa0, 0xa5, 0x34,
	0xb3, 0x3b, 0xdf, 0xf7, 0xfd, 0xf8, 0xb8, 0x27, 0x39, 0x60, 0x54, 0xfb, 0x82, 0xd4, 0x9b, 0xa2,
	0xcc, 0xab, 0x1c, 0x2f, 0x8b, 0xb8, 0x54, 0x34, 0xf9, 0x08, 0x86, 0xa4, 0x3f, 0xd5, 0x92, 0x94,
	0x8a, 0xbf, 0x13, 0x8e, 0xe1, 0x32, 0xc9, 0x77, 0x79, 0x69, 0xe9, 0xb6, 0x36, 0xbd, 0x16, 0x07,
	0x81, 0x16, 0xf4, 0xd3, 0x03, 0x60, 0x5d, 0xd8, 0xda, 0x74, 0x20, 0x5a, 0x89, 0x08, 0xbd, 0x6a,
	0x9b, 0x92, 0xd5, 0xb3, 0xb5, 0xe9, 0x85, 0x68, 0xe6, 0xc9, 0x02, 0x4c, 0xf7, 0x47, 0x9c, 0x65,
	0xb4, 0x6b, 0x5b, 0x5f, 0xc1, 0x40, 0x15, 0x14, 0xff, 0xa4, 0xd2, 0x9b, 0x35, 0x0d, 0x43, 0xd1,
	0x19, 0xe7, 0xed, 0xbd, 0x26, 0x6b, 0xe5, 0xe4, 0x33, 0x8c, 0x82, 0x78, 0x9f, 0x52, 0x56, 0x09,
	0x52, 0x45, 0x9e, 0x29, 0xaa, 0x61, 0xf5, 0x2b, 0x49, 0x48, 0x29, 0x4b, 0xb3, 0xb5, 0xe9, 0x95,
	0x68, 0x25, 0xbe, 0x84, 0xab, 0xf2, 0x48, 0x35, 0xaf, 0x1f, 0x88, 0x93, 0x46, 0x13, 0xf4, 0xe3,
	0x9f, 0x07, 0x42, 0xf7, 0x66, 0x93, 0x07, 0x30, 0x8f, 0xc5, 0x5e, 0xf6, 0x3b, 0xdf, 0x26, 0xdd,
	0x22, 0x5a, 0xb7, 0x08, 0xda, 0x60, 0x24, 0x25, 0xc5, 0x15, 0x7d, 0x73, 0xf3, 0x6d, 0xd6, 0x94,
	0x0e, 0xc5, 0xb9, 0x55, 0x7f, 0x95, 0x52, 0x9a, 0x1f, 0x9b, 0x9b, 0xf9, 0xf5, 0x3f, 0x1d, 0x7a,
	0x72, 0x5f, 0x10, 0x1a, 0xd0, 0xf7, 0x57, 0x91, 0xdc, 0x04, 0x9c, 0x3d, 0x41, 0x06, 0x43, 0xc9,
	0xbf, 0xc8, 0x68, 0xc9, 0xc3, 0xd0, 0x99, 0x73, 0xa6, 0xe1, 0x0d, 0x8c, 0xdc, 0x85, 0xe3, 0xfb,
	0xfc, 0xc3, 0xc9, 0xd4, 0x6b, 0x6c, 0x3d, 0xbb, 0x8f, 0x82, 0x75, 0xb8, 0x88, 0xde, 0xf3, 0x0d,
	0x03, 0x7c, 0x01, 0xb7, 0xe7, 0x4e, 0x24, 0x78, 0x18, 0xac, 0xfc, 0x90, 0x33, 0x03, 0x47, 0x60,
	0xd4, 0xd1, 0x9c, 0xcb, 0x86, 0x1d, 0xa2, 0x05, 0xe3, 0x33, 0xa3, 0x43, 0x9f, 0xb5, 0xbd, 0x82,
	0xcf, 0xbd, 0x50, 0x72, 0xc1, 0xcc, 0xb6, 0xb7, 0x75, 0x3a, 0x78, 0x84, 0x26, 0x40, 0x1d, 0x85,
	0xdc, 0x11, 0xee, 0x82, 0x31, 0xbc, 0x83, 0x9b, 0x4e, 0x77, 0xe0, 0x75, 0x1d, 0x04, 0xce, 0x66,
	0xc9, 0x7d, 0x19, 0x49, 0xe1, 0xf8, 0xa1, 0xe3, 0x4a, 0x6f, 0xe5, 0xb3, 0x31, 0x8e, 0x81, 0xb5,
	0xc1, 0x09, 0xbf, 0xad, 0x37, 0x6e, 0x5d, 0xcf, 0xff, 0xb4, 0xf2, 0x5c, 0xce, 0x9e, 0xe3, 0x1d,
	0xe0, 0x23, 0x33, 0x5a, 0x7b, 0xec, 0xef, 0xbb, 0xfb, 0xfe, 0xc3, 0xe1, 0x44, 0xbf, 0x3e, 0x6d,
	0x0e, 0xf6, 0xed, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0xec, 0x80, 0xb6, 0xa8, 0xbf, 0x02, 0x00,
	0x00,
}
