////////////////////////////////////////////////////////////////////////////////
// Copyright Â© 2018 Privategrity Corporation                                   /
//                                                                             /
// All rights reserved.                                                        /
////////////////////////////////////////////////////////////////////////////////

// Call ./generate.sh to generate the protocol buffer code

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        (unknown)
// source: types.proto

package cmixproto

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Type int32

const (
	// Used as a wildcard for listeners to listen to all existing types.
	// Think of it as "No type in particular"
	Type_NO_TYPE Type = 0
	// See proto buf documentation below
	Type_TEXT_MESSAGE Type = 1
	// Second field is the key data itself. This should be 2048 bits long
	// (according to the message length that our prime allows) and is
	// base64-encoded.
	Type_UDB_PUSH_KEY Type = 10
	// The push key response message is a string. If the key push was a
	// success, the UDB should respond with a message that starts with "PUSHKEY
	// COMPLETE", followed by the fingerprint of the key that was pushed.
	// If the response doesn't begin with "PUSHKEY COMPLETE", the message is
	// an error message and should be shown to the user.
	Type_UDB_PUSH_KEY_RESPONSE Type = 11
	// The get key message includes a single string field with the key
	// fingerprint of the key that needs gettin'. This is the same fingerprint
	// you would have pushed.
	Type_UDB_GET_KEY Type = 12
	// The get key response message is a string. The first space-separated
	// field should always be "GETKEY". The second field is the fingerprint of
	// the key. The third field is "NOTFOUND" if the UDB didn't find the key,
	// or the key itself, encoded in base64, otherwise.
	Type_UDB_GET_KEY_RESPONSE Type = 13
	// To wit: The first argument in the list of space-separated fields is
	// the type of the registration. Currently the only allowed type is
	// "EMAIL". The second argument is the value of the type you're registering
	// with. In all currently acceptable registration types, this would be an
	// email address. If you could register with your phone, it would be your
	// phone number, and so on. Then, the key fingerprint of the user's key is
	// the third argument. To register successfully, you must have already
	// pushed the key with that fingerprint.
	Type_UDB_REGISTER Type = 14
	// The registration response is just a string. It will be either an error
	// message to show to the user, or the message "REGISTRATION COMPLETE" if
	// registration was successful.
	Type_UDB_REGISTER_RESPONSE Type = 15
	// The search message is just another space separated list. The first field
	// will contain the type of registered user you're searching for, namely
	// "EMAIL". The second field with contain the value of that type that
	// you're searching for.
	Type_UDB_SEARCH Type = 16
	// The search response is a list of fields. The first is always "SEARCH".
	// The second is always the value that the user searched for. The third is
	// "FOUND" or "NOTFOUND" depending on whether the UDB found the user. If
	// the user was FOUND, the last field will contain their key fingerprint,
	// which you can use with GET_KEY to get the keys you need to talk with
	// that user. Otherwise, this fourth field won't exist.
	Type_UDB_SEARCH_RESPONSE Type = 17
	// End to End Rekey message types
	// Trigger a rekey, this message is used locally in client only
	Type_REKEY_TRIGGER Type = 30
	// Rekey confirmation message. Sent by partner to confirm completion of a rekey
	Type_REKEY_CONFIRM Type = 31
)

// Enum value maps for Type.
var (
	Type_name = map[int32]string{
		0:  "NO_TYPE",
		1:  "TEXT_MESSAGE",
		10: "UDB_PUSH_KEY",
		11: "UDB_PUSH_KEY_RESPONSE",
		12: "UDB_GET_KEY",
		13: "UDB_GET_KEY_RESPONSE",
		14: "UDB_REGISTER",
		15: "UDB_REGISTER_RESPONSE",
		16: "UDB_SEARCH",
		17: "UDB_SEARCH_RESPONSE",
		30: "REKEY_TRIGGER",
		31: "REKEY_CONFIRM",
	}
	Type_value = map[string]int32{
		"NO_TYPE":               0,
		"TEXT_MESSAGE":          1,
		"UDB_PUSH_KEY":          10,
		"UDB_PUSH_KEY_RESPONSE": 11,
		"UDB_GET_KEY":           12,
		"UDB_GET_KEY_RESPONSE":  13,
		"UDB_REGISTER":          14,
		"UDB_REGISTER_RESPONSE": 15,
		"UDB_SEARCH":            16,
		"UDB_SEARCH_RESPONSE":   17,
		"REKEY_TRIGGER":         30,
		"REKEY_CONFIRM":         31,
	}
)

func (x Type) Enum() *Type {
	p := new(Type)
	*p = x
	return p
}

func (x Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Type) Descriptor() protoreflect.EnumDescriptor {
	return file_types_proto_enumTypes[0].Descriptor()
}

func (Type) Type() protoreflect.EnumType {
	return &file_types_proto_enumTypes[0]
}

func (x Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Type.Descriptor instead.
func (Type) EnumDescriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{0}
}

type RekeyTrigger struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PublicKey used in the registration
	PublicKey []byte `protobuf:"bytes,1,opt,name=publicKey,proto3" json:"publicKey,omitempty"`
	// ID of the session used to create this session
	SessionID []byte `protobuf:"bytes,2,opt,name=SessionID,json=sessionID,proto3" json:"SessionID,omitempty"`
}

func (x *RekeyTrigger) Reset() {
	*x = RekeyTrigger{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RekeyTrigger) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RekeyTrigger) ProtoMessage() {}

func (x *RekeyTrigger) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RekeyTrigger.ProtoReflect.Descriptor instead.
func (*RekeyTrigger) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{0}
}

func (x *RekeyTrigger) GetPublicKey() []byte {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

func (x *RekeyTrigger) GetSessionID() []byte {
	if x != nil {
		return x.SessionID
	}
	return nil
}

var File_types_proto protoreflect.FileDescriptor

var file_types_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70,
	0x61, 0x72, 0x73, 0x65, 0x22, 0x4a, 0x0a, 0x0c, 0x52, 0x65, 0x6b, 0x65, 0x79, 0x54, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b,
	0x65, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44,
	0x2a, 0xf9, 0x01, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x4e, 0x4f, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x45, 0x58, 0x54, 0x5f, 0x4d,
	0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x55, 0x44, 0x42, 0x5f,
	0x50, 0x55, 0x53, 0x48, 0x5f, 0x4b, 0x45, 0x59, 0x10, 0x0a, 0x12, 0x19, 0x0a, 0x15, 0x55, 0x44,
	0x42, 0x5f, 0x50, 0x55, 0x53, 0x48, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f,
	0x4e, 0x53, 0x45, 0x10, 0x0b, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x44, 0x42, 0x5f, 0x47, 0x45, 0x54,
	0x5f, 0x4b, 0x45, 0x59, 0x10, 0x0c, 0x12, 0x18, 0x0a, 0x14, 0x55, 0x44, 0x42, 0x5f, 0x47, 0x45,
	0x54, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x10, 0x0d,
	0x12, 0x10, 0x0a, 0x0c, 0x55, 0x44, 0x42, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52,
	0x10, 0x0e, 0x12, 0x19, 0x0a, 0x15, 0x55, 0x44, 0x42, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54,
	0x45, 0x52, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x10, 0x0f, 0x12, 0x0e, 0x0a,
	0x0a, 0x55, 0x44, 0x42, 0x5f, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x10, 0x10, 0x12, 0x17, 0x0a,
	0x13, 0x55, 0x44, 0x42, 0x5f, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x5f, 0x52, 0x45, 0x53, 0x50,
	0x4f, 0x4e, 0x53, 0x45, 0x10, 0x11, 0x12, 0x11, 0x0a, 0x0d, 0x52, 0x45, 0x4b, 0x45, 0x59, 0x5f,
	0x54, 0x52, 0x49, 0x47, 0x47, 0x45, 0x52, 0x10, 0x1e, 0x12, 0x11, 0x0a, 0x0d, 0x52, 0x45, 0x4b,
	0x45, 0x59, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x52, 0x4d, 0x10, 0x1f, 0x42, 0x0b, 0x5a, 0x09,
	0x63, 0x6d, 0x69, 0x78, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_types_proto_rawDescOnce sync.Once
	file_types_proto_rawDescData = file_types_proto_rawDesc
)

func file_types_proto_rawDescGZIP() []byte {
	file_types_proto_rawDescOnce.Do(func() {
		file_types_proto_rawDescData = protoimpl.X.CompressGZIP(file_types_proto_rawDescData)
	})
	return file_types_proto_rawDescData
}

var file_types_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_types_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_types_proto_goTypes = []interface{}{
	(Type)(0),            // 0: parse.Type
	(*RekeyTrigger)(nil), // 1: parse.RekeyTrigger
}
var file_types_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_types_proto_init() }
func file_types_proto_init() {
	if File_types_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_types_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RekeyTrigger); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_types_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_types_proto_goTypes,
		DependencyIndexes: file_types_proto_depIdxs,
		EnumInfos:         file_types_proto_enumTypes,
		MessageInfos:      file_types_proto_msgTypes,
	}.Build()
	File_types_proto = out.File
	file_types_proto_rawDesc = nil
	file_types_proto_goTypes = nil
	file_types_proto_depIdxs = nil
}
