///////////////////////////////////////////////////////////////////////////////
// Copyright Â© 2020 xx network SEZC                                          //
//                                                                           //
// Use of this source code is governed by a license that can be found in the //
// LICENSE file                                                              //
///////////////////////////////////////////////////////////////////////////////

package parse

import (
	"bytes"
	"reflect"
	"testing"
)

// Expected messagePart for checking against, generated by gotmp in Test_newMessagePart
var emp = messagePart{
	Data: []uint8{0x0, 0x0, 0x0, 0x20, 0x6, 0x0, 0x7, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67},
	Id:   []uint8{0x0, 0x0, 0x0, 0x20}, Part: []uint8{0x6},
	Len:      []uint8{0x0, 0x7},
	Contents: []uint8{0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67},
}

// This tests that a new function part is successfully created
func Test_newMessagePart(t *testing.T) {
	gotmp := newMessagePart(32, 6, []byte{'t', 'e', 's', 't', 'i', 'n', 'g'})
	if !reflect.DeepEqual(gotmp, emp) {
		t.Errorf("MessagePart received and MessagePart expected do not match.\n\tGot: %#v\n\tExpected: %#v", gotmp, emp)
	}
}

// Test that GetID returns the correct ID
func TestMessagePart_GetID(t *testing.T) {
	if emp.GetID() != 32 {
		t.Errorf("received and expected do not match."+
			"\n\tGot: %#v\n\tExpected: %#v", emp.GetID(), 32)
	}
}

// Test that GetPart returns the correct part number
func TestMessagePart_GetPart(t *testing.T) {
	if emp.GetPart() != 6 {
		t.Errorf("received and expected do not match."+
			"\n\tGot: %#v\n\tExpected: %#v", emp.GetPart(), 6)
	}
}

// Test that GetContents returns the message contests
func TestMessagePart_GetContents(t *testing.T) {
	if bytes.Compare(emp.GetContents(), []byte{'t', 'e', 's', 't', 'i', 'n', 'g'}) != 0 {
		t.Errorf("received and expected do not match."+
			"\n\tGot: %#v\n\tExpected: %#v", emp.GetContents(), 6)
	}
}

// Test that GetSizedContents returns the message contests
func TestMessagePart_GetSizedContents(t *testing.T) {
	if bytes.Compare(emp.GetSizedContents(), []byte{'t', 'e', 's', 't', 'i', 'n', 'g'}) != 0 {
		t.Errorf("received and expected do not match."+
			"\n\tGot: %#v\n\tExpected: %#v", emp.GetSizedContents(), 6)
	}
}

// Test that GetContentsLength returns the message length
func TestMessagePart_GetContentsLength(t *testing.T) {
	if emp.GetContentsLength() != 7 {
		t.Errorf("received and expected do not match."+
			"\n\tGot: %#v\n\tExpected: %#v", emp.GetContentsLength(), 7)
	}
}
